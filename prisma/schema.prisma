generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?   @unique
  bio           String?
  tier          Int       @default(1)
  totalVotes    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  recordings    Recording[]
  beats         Beat[]
  votes         Vote[]
  likes         Like[]
  comments      Comment[]
  commentLikes  CommentLike[]
  plays         Play[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recording {
  id          String   @id @default(cuid())
  title       String
  description String?
  filePath    String   // Supabase storage path
  fileUrl     String   // Public URL
  duration    Int?     // Duration in seconds
  fileSize    Int?     // File size in bytes
  mimeType    String?  // File MIME type
  userId      String
  beatId      String?  // Optional: if recorded over a beat
  votes       Int      @default(0)
  isPublic    Boolean  @default(false)
  // Engagement metrics
  likesCount     Int      @default(0)
  commentsCount  Int      @default(0)
  playsCount     Int      @default(0)
  sharesCount    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  beat        Beat?     @relation(fields: [beatId], references: [id], onDelete: SetNull)
  userVotes   Vote[]
  likes       Like[]
  comments    Comment[]
  plays       Play[]
}

model Beat {
  id          String   @id @default(cuid())
  title       String
  description String?
  filePath    String   // Supabase storage path
  fileUrl     String   // Public URL
  genre       String?
  bpm         Int?
  key         String?
  mood        String?
  tags        String[] // Array of tags
  duration    Int?     // Duration in seconds
  fileSize    Int?     // File size in bytes
  mimeType    String?  // File MIME type
  userId      String
  downloads   Int      @default(0)
  isPublic    Boolean  @default(true)
  isFree      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  recordings  Recording[]
}

model Vote {
  id          String    @id @default(cuid())
  userId      String
  recordingId String
  value       Int       // 1 for upvote, -1 for downvote
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  
  @@unique([userId, recordingId])
}

model Like {
  id          String    @id @default(cuid())
  userId      String
  recordingId String
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  
  @@unique([userId, recordingId])
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  userId      String
  recordingId String
  parentId    String?   // For nested comments/replies
  likesCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  likes       CommentLike[]
}

model Play {
  id          String    @id @default(cuid())
  userId      String?   // Optional - can track anonymous plays
  recordingId String
  duration    Int?      // How long they listened (seconds)
  completed   Boolean   @default(false) // Did they listen to the end
  createdAt   DateTime  @default(now())
  
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
}
